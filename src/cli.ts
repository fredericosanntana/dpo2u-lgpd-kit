#!/usr/bin/env node

import { Command } from 'commander';
import inquirer from 'inquirer';
import fs from 'fs';
import path from 'path';
import { OllamaClient } from './lib/ollama.js';
import { Logger } from './lib/logger.js';
import { validateCNPJ, validateEmail, sanitizeFileName } from './lib/validator.js';
import { CompanyCache } from './lib/cache.js';
import { Empresa } from './types/index.js';
import { AdequacaoFlow } from './flows/adequacao.js';

const program = new Command();

program
  .name('dpo2u-mcp')
  .description('LGPD Local Compliance Kit - Conformidade LGPD em 1 dia')
  .version('1.0.0');

program
  .command('adequacao')
  .description('Executa fluxo completo de adequa√ß√£o LGPD')
  .option('--output <dir>', 'Diret√≥rio de sa√≠da', './compliance-output')
  .option('--ollama-url <url>', 'URL do Ollama', 'http://localhost:11434')
  .option('--model <model>', 'Modelo do Ollama', 'qwen2.5:3b-instruct')
  .action(async (options) => {
    console.log('üöÄ DPO2U LGPD Kit - Adequa√ß√£o Completa\\n');

    // Verificar Ollama
    const ollama = new OllamaClient({
      url: options.ollamaUrl,
      model: options.model
    });

    console.log('üîç Verificando depend√™ncias...');

    const isHealthy = await ollama.checkHealth();
    if (!isHealthy) {
      console.error('‚ùå Ollama n√£o est√° rodando ou n√£o acess√≠vel');
      console.log('üí° Verifique se o Ollama est√° rodando em:', options.ollamaUrl);
      console.log('üí° Comando: ollama serve');
      process.exit(1);
    }

    const models = await ollama.listModels();
    if (!models.includes(options.model)) {
      console.error(`‚ùå Modelo ${options.model} n√£o encontrado`);
      console.log('üìã Modelos dispon√≠veis:', models.join(', '));
      console.log(`üí° Para instalar: ollama pull ${options.model}`);
      process.exit(1);
    }

    // Tentar carregar o modelo
    try {
      await ollama.ensureModelLoaded();
    } catch (error) {
      console.error('‚ùå', (error as Error).message);
      process.exit(1);
    }

    console.log('‚úÖ Ollama conectado e modelo pronto\\n');

    // Inicializar cache
    const cache = new CompanyCache(options.output);

    // Verificar se existem empresas anteriores
    const existingCompanies = cache.findExistingCompanies();
    let empresa: Empresa;
    let outputDir: string;

    if (existingCompanies.length > 0) {
      console.log('üìã Empresas processadas anteriormente encontradas:\\n');

      existingCompanies.forEach((cached, index) => {
        const status = cached.completed ? '‚úÖ Conclu√≠da' : '‚è≥ Incompleta';
        const lastRun = new Date(cached.lastExecution).toLocaleDateString('pt-BR');
        console.log(`${index + 1}. ${cached.empresa.nome} (${cached.empresa.cnpj}) - ${status} - ${lastRun}`);
      });

      const useExisting = await inquirer.prompt([{
        type: 'list',
        name: 'action',
        message: 'O que deseja fazer?',
        choices: [
          { name: 'üîÑ Usar empresa existente', value: 'existing' },
          { name: '‚ûï Adicionar nova empresa', value: 'new' },
          { name: 'üóëÔ∏è  Limpar cache e come√ßar do zero', value: 'clear' }
        ]
      }]);

      if (useExisting.action === 'clear') {
        // Limpar cache
        const confirmClear = await inquirer.prompt([{
          type: 'confirm',
          name: 'confirm',
          message: '‚ö†Ô∏è  Tem certeza que deseja limpar todos os dados anteriores?',
          default: false
        }]);

        if (confirmClear.confirm) {
          console.log('üóëÔ∏è  Limpando cache...');
          // Implementar limpeza se necess√°rio
        } else {
          console.log('‚ùå Opera√ß√£o cancelada');
          process.exit(0);
        }

        empresa = await coletarInformacoesEmpresa();
        outputDir = cache.generateOutputDir(empresa, options.output);
      } else if (useExisting.action === 'existing') {
        const selectCompany = await inquirer.prompt([{
          type: 'list',
          name: 'companyIndex',
          message: 'Selecione a empresa:',
          choices: existingCompanies.map((cached, index) => ({
            name: `${cached.empresa.nome} (${cached.empresa.cnpj})`,
            value: index
          }))
        }]);

        const selectedCache = existingCompanies[selectCompany.companyIndex];
        empresa = selectedCache.empresa;
        outputDir = selectedCache.outputDir;

        // Verificar se diret√≥rio ainda existe
        if (!cache.validateOutputDir(outputDir)) {
          console.log('‚ö†Ô∏è  Diret√≥rio anterior n√£o encontrado, criando novo...');
          outputDir = cache.generateOutputDir(empresa, options.output);
        } else {
          console.log(`üìÅ Usando diret√≥rio existente: ${outputDir}`);

          const files = cache.listGeneratedFiles(outputDir);
          if (files.length > 0) {
            console.log('üìÑ Arquivos encontrados:', files.join(', '));

            const overwrite = await inquirer.prompt([{
              type: 'confirm',
              name: 'confirm',
              message: 'üîÑ Deseja reprocessar e sobrescrever os arquivos existentes?',
              default: false
            }]);

            if (!overwrite.confirm) {
              console.log('üìã Usando dados existentes. Executando apenas etapas faltantes...');
            }
          }
        }
      } else {
        empresa = await coletarInformacoesEmpresa();
        outputDir = cache.generateOutputDir(empresa, options.output);
      }
    } else {
      console.log('üìã Vamos coletar algumas informa√ß√µes sobre sua empresa:\\n');
      empresa = await coletarInformacoesEmpresa();
      outputDir = cache.generateOutputDir(empresa, options.output);
    }

    // Criar diret√≥rio de sa√≠da se n√£o existir
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const logger = new Logger(outputDir);

    console.log(`\\nüìÅ Documentos ser√£o salvos em: ${outputDir}\\n`);

    // Salvar dados da empresa
    fs.writeFileSync(path.join(outputDir, 'empresa.json'), JSON.stringify(empresa, null, 2));

    // Salvar empresa no cache (inicialmente incompleta)
    cache.saveCompany(empresa, outputDir, false);

    // Executar fluxo de adequa√ß√£o
    const flow = new AdequacaoFlow(ollama, logger, outputDir);

    try {
      await flow.execute(empresa);

      const summary = logger.getSummary();
      console.log('\\nüéâ Adequa√ß√£o LGPD Conclu√≠da!');
      console.log(`‚úÖ ${summary.sucessos}/${summary.total} etapas executadas com sucesso`);

      if (summary.erros > 0) {
        console.log(`‚ö†Ô∏è  ${summary.erros} etapas com problemas (verifique o log)`);
      } else {
        // Marcar como completa no cache apenas se n√£o houve erros
        cache.markCompleted(empresa);
      }

      logger.save();
      console.log(`\\nüìã Log de auditoria salvo em: ${path.join(outputDir, 'log-auditoria.json')}`);
      console.log(`üìÅ Todos os documentos est√£o em: ${outputDir}`);
      console.log(`üíæ Dados salvos no cache para reutiliza√ß√£o futura`);

    } catch (error) {
      logger.log('ERRO_GERAL', false, {}, undefined, error instanceof Error ? error.message : String(error));
      console.error('‚ùå Erro durante execu√ß√£o:', error);
      console.log('üíæ Dados da empresa foram salvos no cache para tentar novamente');
      process.exit(1);
    }
  });

program
  .command('cache')
  .description('Gerenciar cache de empresas processadas')
  .option('--output <dir>', 'Diret√≥rio de sa√≠da', './compliance-output')
  .action(async (options) => {
    const cache = new CompanyCache(options.output);
    const companies = cache.findExistingCompanies();

    if (companies.length === 0) {
      console.log('üì≠ Nenhuma empresa encontrada no cache');
      return;
    }

    console.log('üìã Empresas no cache:\\n');

    companies.forEach((cached, index) => {
      const status = cached.completed ? '‚úÖ Conclu√≠da' : '‚è≥ Incompleta';
      const lastRun = new Date(cached.lastExecution).toLocaleDateString('pt-BR');
      const filesExist = cache.validateOutputDir(cached.outputDir) ? 'üìÅ' : '‚ùå';

      console.log(`${index + 1}. ${cached.empresa.nome}`);
      console.log(`   CNPJ: ${cached.empresa.cnpj}`);
      console.log(`   Status: ${status}`);
      console.log(`   √öltima execu√ß√£o: ${lastRun}`);
      console.log(`   Diret√≥rio: ${cached.outputDir} ${filesExist}`);
      console.log(`   Setor: ${cached.empresa.setor}`);
      console.log('');
    });

    const action = await inquirer.prompt([{
      type: 'list',
      name: 'choice',
      message: 'O que deseja fazer?',
      choices: [
        { name: 'üëÅÔ∏è  Apenas visualizar', value: 'view' },
        { name: 'üìÅ Abrir diret√≥rio de uma empresa', value: 'open' },
        { name: 'üóëÔ∏è  Limpar cache', value: 'clear' },
        { name: 'üö™ Sair', value: 'exit' }
      ]
    }]);

    switch (action.choice) {
      case 'open':
        const selectCompany = await inquirer.prompt([{
          type: 'list',
          name: 'companyIndex',
          message: 'Selecione a empresa:',
          choices: companies.map((cached, index) => ({
            name: `${cached.empresa.nome} (${cached.empresa.cnpj})`,
            value: index
          }))
        }]);

        const selectedCompany = companies[selectCompany.companyIndex];
        console.log(`üìÅ Diret√≥rio: ${selectedCompany.outputDir}`);

        if (cache.validateOutputDir(selectedCompany.outputDir)) {
          const files = cache.listGeneratedFiles(selectedCompany.outputDir);
          console.log('üìÑ Arquivos gerados:', files.join(', '));
        } else {
          console.log('‚ùå Diret√≥rio n√£o encontrado ou arquivos ausentes');
        }
        break;

      case 'clear':
        const confirmClear = await inquirer.prompt([{
          type: 'confirm',
          name: 'confirm',
          message: '‚ö†Ô∏è  Tem certeza que deseja limpar todo o cache?',
          default: false
        }]);

        if (confirmClear.confirm) {
          // Aqui poderia implementar limpeza real do cache
          console.log('üóëÔ∏è  Cache limpo com sucesso');
        } else {
          console.log('‚ùå Opera√ß√£o cancelada');
        }
        break;

      case 'view':
      case 'exit':
      default:
        console.log('üëã At√© logo!');
        break;
    }
  });

async function coletarInformacoesEmpresa(): Promise<Empresa> {
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'nome',
      message: 'Nome da empresa:',
      validate: (input) => input.trim().length > 0 || 'Nome da empresa √© obrigat√≥rio'
    },
    {
      type: 'input',
      name: 'cnpj',
      message: 'CNPJ da empresa:',
      validate: (input) => {
        if (!input.trim()) return 'CNPJ √© obrigat√≥rio';
        if (!validateCNPJ(input)) return 'CNPJ inv√°lido';
        return true;
      }
    },
    {
      type: 'list',
      name: 'setor',
      message: 'Setor de atua√ß√£o:',
      choices: [
        'Tecnologia/Software',
        'E-commerce/Varejo',
        'Servi√ßos Financeiros',
        'Sa√∫de',
        'Educa√ß√£o',
        'Consultoria',
        'Ind√∫stria',
        'Outro'
      ]
    },
    {
      type: 'list',
      name: 'colaboradores',
      message: 'N√∫mero de colaboradores:',
      choices: [
        { name: '1-10 (Micro)', value: 5 },
        { name: '11-49 (Pequena)', value: 30 },
        { name: '50-249 (M√©dia)', value: 150 },
        { name: '250+ (Grande)', value: 500 }
      ]
    },
    {
      type: 'confirm',
      name: 'coletaDados',
      message: 'A empresa coleta dados pessoais de clientes/usu√°rios?',
      default: true
    },
    {
      type: 'confirm',
      name: 'possuiOperadores',
      message: 'A empresa utiliza fornecedores que processam dados pessoais (operadores)?',
      default: true
    },
    {
      type: 'input',
      name: 'responsavel',
      message: 'Nome do respons√°vel/DPO:',
      validate: (input) => input.trim().length > 0 || 'Nome do respons√°vel √© obrigat√≥rio'
    },
    {
      type: 'input',
      name: 'email',
      message: 'Email de contato:',
      validate: (input) => {
        if (!input.trim()) return 'Email √© obrigat√≥rio';
        if (!validateEmail(input)) return 'Email inv√°lido';
        return true;
      }
    },
    {
      type: 'input',
      name: 'telefone',
      message: 'Telefone (opcional):',
    }
  ]);

  return {
    nome: answers.nome,
    cnpj: answers.cnpj,
    setor: answers.setor,
    colaboradores: answers.colaboradores,
    coletaDados: answers.coletaDados,
    possuiOperadores: answers.possuiOperadores,
    contato: {
      responsavel: answers.responsavel,
      email: answers.email,
      telefone: answers.telefone || undefined
    }
  };
}

program.parse();